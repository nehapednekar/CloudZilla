{
 "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Template for creating an EC2 instance, DynamoDBTable, S3 bucket, RDS Instance",
  "Parameters": {
   "EC2ImageId": {
   "Type": "String"
  },
    "VpcId": {
      "Type": "String"
    },
    "HostedZoneId": {
      "Type": "String"
    },
    "HostedZoneName": {
      "Type": "String"
    },
    "EC2InstanceType": {
   "Type": "String"
  },
  "EC2InstanceName": {
   "Type": "String"
  },
  "EC2VolumeSize": {
   "Type": "String"
  },
  "EC2KeyName": {
   "Type": "String"
  },
  "EC2SecurityGroup": {
   "Type": "String"
  },
  "SubnetId1": {
   "Type": "String"
  },
  "SubnetId2": {
   "Type": "String"
  },
   "SubnetId3": {
     "Type": "String"
   },
  "EC2RoleName": {
   "Type": "String"
  },
  "DynamoDBTableName": {
   "Type": "String"
  },
  "BucketName": {
   "Type": "String"
  },
  "DBEngine": {
   "Type": "String"
  },
  "EngineVersion": {
   "Type": "String"
  },
  "DBInstanceClass": {
   "Type": "String"
  },
  "DBInstanceIdentifier": {
   "Type": "String"
  },
  "MasterUsername": {
   "Type": "String"
  },
  "MasterPassword": {
   "Type": "String"
  },
  "DBName": {
   "Type": "String"
  },
  "RDSSecurityGroup": {
   "Type": "String"
  },
 "AssociatePublicIpAddress":
 {
  "Type": "String"
 },
  "Cooldown":
  {
   "Type": "Number"
  },
  "LaunchConfigurationName":
  {
   "Type": "String"
  },
  "MinSize":
  {
   "Type": "Number"
  },
  "MaxSize":
  {
   "Type": "Number"
  },
  "DesiredCapacity":
  {
   "Type": "Number"
  },
  "ELBSecurityGroup": {
     "Type": "String"
   }

 },
 "Resources": {
  "MyLaunchConfig": {
   "Type": "AWS::AutoScaling::LaunchConfiguration",
   "Properties": {
   "AssociatePublicIpAddress": {
      "Ref": "AssociatePublicIpAddress"
    },
     "ImageId": {
     "Ref": "EC2ImageId"
    },
    "InstanceType": {
     "Ref": "EC2InstanceType"
    },
     "SecurityGroups": [{"Ref": "EC2SecurityGroup"}],
    "KeyName": {
     "Ref": "EC2KeyName"
    },
    "UserData": {
     "Fn::Base64": {
      "Fn::Join": [
       "",
       [
        "#!/bin/bash -xe \n",
        "sudo apt-get update \n",
        "sudo apt-get install openjdk-8-jdk -y\n",
        "sudo apt-get install ruby -y \n",
        "sudo apt-get install wget -y \n",
        "sudo apt-get install python -y \n",
        "sudo apt-get update \n",
        "sudo wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install \n",
        "sudo chmod +x ./install \n",
        "sudo ./install auto \n",
        "sudo service codedeploy-agent start \n",
        "sudo apt-get install tomcat8 -y \n",
        "sudo service tomcat8 restart \n",
        "cd /usr/share/tomcat8/bin \n",
        "sudo touch setenv.sh \n",
        "sudo chmod 777 setenv.sh \n",
        "sudo echo '#!/bin/sh' >> setenv.sh \n",
        {
         "Fn::Join": [
          "",
          [
           "sudo echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.url=jdbc:mysql://",
           {
            "Fn::GetAtt": [
             "myRDSInstance",
             "Endpoint.Address"
            ]
           },
           ":3306/csye6225\"' >> setenv.sh \n"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "sudo echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.username=",
           {
            "Ref": "MasterUsername"
           },
           "\"' >> setenv.sh \n"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "sudo echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.password=",
           {
            "Ref": "MasterPassword"
           },
           "\"' >> setenv.sh \n"
          ]
         ]
        },
        "sudo echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.profiles.active=aws\"' >> setenv.sh \n",

        "sudo service tomcat8 restart \n",
        "sudo apt-get update \n",
        "sudo touch /tmp/awslogs.conf \n",
        "sudo chmod 777 /tmp/awslogs.conf \n",
        "sudo echo '[general]' > /tmp/awslogs.conf \n",
        "sudo echo 'state_file= /var/awslogs/agent-state' >> /tmp/awslogs.conf \n",
        "sudo echo '[logstream1]' >> /tmp/awslogs.conf \n",
        "sudo echo 'file = /var/log/tomcat8/csye6225-aws.log' >> /tmp/awslogs.conf \n",
        "sudo echo 'log_group_name = csye6225-webapp' >> /tmp/awslogs.conf \n",
        "sudo echo 'log_stream_name = csye6225-webapp' >> /tmp/awslogs.conf \n",
        "sudo echo 'datetime_format = %d/%b/%Y:%H:%M:%S' >> /tmp/awslogs.conf \n",
        "curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O \n",
        {
         "Fn::Join": [
          " ",
          [
           "sudo python ./awslogs-agent-setup.py -n -r",
           {
            "Ref": "AWS::Region"
           },
           "-c /tmp/awslogs.conf || error_exit 'Failed to run CloudWatch Logs agent setup' \n"
          ]
         ]
        },
        "cd /etc/systemd/system \n",
        "sudo touch awslogs.service \n",
        "sudo echo '[Unit]' >> awslogs.service \n",
        "sudo echo 'Description=Service for CloudWatch Logs agent' >> awslogs.service \n",
        "sudo echo 'After=rc-local.service' >> awslogs.service \n",
        "sudo echo '[Service]' >> awslogs.service \n",
        "sudo echo 'Type=simple' >> awslogs.service \n",
        "sudo echo 'Restart=always' >> awslogs.service \n",
        "sudo echo 'KillMode=process' >> awslogs.service \n",
        "sudo echo 'TimeoutSec=infinity' >> awslogs.service \n",
        "sudo echo 'PIDFile=/var/awslogs/state/awslogs.pid' >> awslogs.service \n",
        "sudo echo 'ExecStart=/var/awslogs/bin/awslogs-agent-launcher.sh --start --background --pidfile $PIDFILE --user awslogs --chuid awslogs &amp;' >> awslogs.service \n",
        "sudo echo '[Install]' >> awslogs.service \n",
        "sudo echo 'WantedBy=multi-user.target' >> awslogs.service \n",
        "sudo systemctl start awslogs.service \n",
        "sudo systemctl enable awslogs.service \n"
       ]
      ]
     }
    },


    "BlockDeviceMappings": [
     {
      "DeviceName": "/dev/sda1",
      "Ebs": {
       "VolumeType": "gp2",
       "VolumeSize": {
        "Ref": "EC2VolumeSize"
       }
      }
     }
    ],
    "IamInstanceProfile": {
     "Ref": "myIAMInstanceProfile"
    }
   }
  },


   "WebServerGroup": {
     "Type": "AWS::AutoScaling::AutoScalingGroup",
     "Properties": {
       "Tags": [{
         "Key": "Name",
         "Value": "CSYE6225",
         "PropagateAtLaunch": true
       }],
       "VPCZoneIdentifier": [
         {
           "Ref": "SubnetId1"
         },
         {
           "Ref": "SubnetId3"
         }
       ],
       "LaunchConfigurationName": {
         "Ref":"MyLaunchConfig"
       },
       "MinSize": {"Ref":"MinSize"},
       "MaxSize": {"Ref":"MaxSize"},
       "TargetGroupARNs": [
         {
           "Ref": "myTargetGroup"
         }
       ]
     },
     "DependsOn": [
       "Listener",
       "MyLaunchConfig"
     ]
   },


   "Listener": {
     "Type": "AWS::ElasticLoadBalancingV2::Listener",
     "Properties": {
       "Certificates": [
         {
           "CertificateArn": ""
         }
       ],
       "DefaultActions": [
         {
           "Type": "forward",
           "TargetGroupArn": {
             "Ref": "myTargetGroup"
           }
         }
       ],
       "LoadBalancerArn": {
         "Ref": "MyLoadBalancer"
       },
       "Port": "443",
       "Protocol": "HTTPS"
     }
   },
   "myTargetGroup": {
     "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
     "Properties": {
       "HealthCheckIntervalSeconds": 40,
       "HealthCheckTimeoutSeconds": 30,
       "Protocol": "HTTP",
       "HealthCheckProtocol": "HTTP",
       "HealthCheckPort": "8080",
       "TargetGroupAttributes": [
         {
           "Key": "deregistration_delay.timeout_seconds",
           "Value": "20"
         }
       ],
       "Port": 8080,
       "VpcId": {"Ref": "VpcId"},
       "Tags": [
         {
           "Key": "Name",
           "Value": "CSYE6225"
         }
       ]
     }
   },


   "MyLoadBalancer": {
     "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
     "Properties": {
       "Scheme": "internet-facing",
       "Subnets": [
         {
           "Ref": "SubnetId1"
         },
         {
           "Ref": "SubnetId3"
         }
       ],
       "LoadBalancerAttributes": [
         {
           "Key": "idle_timeout.timeout_seconds",
           "Value": "60"
         }
       ],
       "SecurityGroups": [
         {
           "Ref": "ELBSecurityGroup"
         }
       ],
       "Tags": [
         {
           "Key": "Name",
           "Value": "CSYE6225"
         }
       ]
     }
   },

  "myIAMInstanceProfile": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Path": "/",
    "Roles": [
     {
      "Ref": "EC2RoleName"
     }
    ]
   }
  },
  "myDynamoDBTable": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "username",
      "AttributeType": "S"
     }
    ],
    "KeySchema": [
     {
      "AttributeName": "username",
      "KeyType": "HASH"
     }
    ],
    "ProvisionedThroughput": {
     "ReadCapacityUnits": "5",
     "WriteCapacityUnits": "5"
    },
    "TableName": {
     "Ref": "DynamoDBTableName"
    },
    "TimeToLiveSpecification": {
     "AttributeName": "ttl",
     "Enabled": true
    }
   }
  },
  "myS3Bucket": {
   "Type": "AWS::S3::Bucket",
   "Description": "S3 bucket to hold website content",
   "Properties": {
    "AccessControl": "Private",
    "BucketName": {
     "Ref": "BucketName"
    }

   }
  }
 ,



  "myBucketPolicy":{
   "Type" : "AWS::S3::BucketPolicy",
   "Properties" : {
    "Bucket" : {"Ref" : "BucketName"},
    "PolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Effect": "Allow",
       "Principal": "*",
       "Action": "s3:ListBucket",
       "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "BucketName" }]]}
      },
      {
       "Effect": "Allow",
       "Principal": "*",
       "Action": [
        "s3:PutObject",
        "s3:GetObject",
        "s3:DeleteObject"
       ],
       "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "BucketName" } , "/*" ]]}
      }
     ]
    }


   }
  },

  "myRDSInstance": {
   "Type": "AWS::RDS::DBInstance",
   "Properties": {
    "AllocatedStorage": "10",
    "DBInstanceClass": {
     "Ref": "DBInstanceClass"
    },
    "DBInstanceIdentifier": {
     "Ref": "DBInstanceIdentifier"
    },
    "DBName": {
     "Ref": "DBName"
    },
    "Engine": {
     "Ref": "DBEngine"
    },
    "EngineVersion": {
     "Ref": "EngineVersion"
    },
    "MasterUsername": {
     "Ref": "MasterUsername"
    },
    "MasterUserPassword": {
     "Ref": "MasterPassword"
    },
    "MultiAZ": "false",
    "PubliclyAccessible": "false",
    "DBSubnetGroupName": {
     "Ref": "myRDSDBSubnet"
    },
    "VPCSecurityGroups": [
     {
      "Ref": "RDSSecurityGroup"
     }
    ]
   }
  },
  "myRDSDBSubnet": {
   "Type": "AWS::RDS::DBSubnetGroup",
   "Properties": {
    "DBSubnetGroupDescription": "RDS Subnet Group",
    "SubnetIds": [
     {
      "Ref": "SubnetId1"
     },
     {
      "Ref": "SubnetId2"
     }
    ]
   }
  },
  "MySNSTopic" : {
   "Type" : "AWS::SNS::Topic",
   "Properties" : {
    "TopicName" : "ForgotPassword"
   }
  },

   "myDNSRecord": {
     "Type": "AWS::Route53::RecordSet",
     "Properties": {
       "HostedZoneId": {
         "Ref": "HostedZoneId"
       },
       "Name": {
         "Ref": "HostedZoneName"
       },
       "Comment": "DNS name for my instance.",
       "Type": "A",
       "AliasTarget": {
         "HostedZoneId": {
           "Fn::GetAtt": [
             "MyLoadBalancer",
             "CanonicalHostedZoneID"
           ]
         },
         "DNSName": {
           "Fn::GetAtt": [
             "MyLoadBalancer",
             "DNSName"
           ]
         }
       }
     }
   }

 }
}